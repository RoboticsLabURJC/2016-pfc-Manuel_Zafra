import sys, traceback, Ice
import jderobot
import numpy as np
import threading
import math

class Pilot():

    def __init__(self, interface):
        self.path = np.array([(-5.16,-1.92,1.38),(-4.28,-0.61,1.38),(-3.3,-0.61,1.38),
                (-2.72,-2.72,1.38),(-2.52,-3.74,1.58),(-2.52,-5.44,1.58),
                (-1.59,-6.87,1.22),(-1.14,-5.9,1.45),(-2.52,-5.04,1.52)])
                #(-2.52,-2.34,1.51),(-0.75,-2.34,1.51)]
        self.step = 0
        self.angDiff = 0
        self.pathError = 0
        self.posError = 0
        self.setVel(0.3,0.3)
        self.interface = interface
        self.fullpath = self.loadpath()
        self.Vel = 0.2
        self.startCount = 0
        self.K = 0.25 #yaw adjustment gain rate


    def loadpath(self):
        a = []
        for line in open('path.txt','r').readlines():
            pose = jderobot.Pose3DData()
            line = line.rstrip('\n')
            linelist = line.split()
            pose.x = float(linelist[0])
            pose.y = float(linelist[1])
            pose.z = float(linelist[2])
            pose.q0 = float(linelist[3])
            #Uso q0 aunque en realidad ahi se gurada el yaw
            a.append(pose)
        self.path = list(a)



    def update(self):
        pose3d = self.interface.getRealPose3D()
        self.pilot(pose3d)

    def pilot(self, pose3d):

        #Calculates drone's movement command
        dz = (self.path[self.step+1].z - pose3d.z)
        while(self.distance(pose3d) < 0.1 and dz <0.1):
            self.step = self.step+1
        print "STEP %f" %self.step
        yaw = self.qtoyaw(pose3d.q0,pose3d.q1,pose3d.q2,pose3d.q3)

        #Error calculation
        p = self.path[self.step]

        self.Vel = 0.2

        ANGe = p.q0 - yaw
        while (ANGe < -math.pi):
            ANGe = ANGe + 2*math.pi
        while (ANGe > math.pi):
            ANGe = ANGe - 2*math.pi

        """
        A = [[math.cos(yaw), math.sin(yaw), 0],
            [-math.sin(yaw), math.cos(yaw), 0],
            [0, 0, 1]]
        B = [[p.x - pose3d.x], [p.y - pose3d.y], [ANGe]]
        print "p %f - yaw %f" %(p.q0, yaw)
        E = np.dot(A,B) # E = [ Xe, Ye, ANGe ]
        """
        print "angE %f" %ANGe


        #Position prediction
        L = self.Vel * 0.08
        Xf = L * math.cos(yaw) + pose3d.x
        Yf = L * math.sin(yaw) + pose3d.y
        #print "posicion x,y %f %f" %(pose3d.x,pose3d.y)
        #print "predicion x,y %f %f" %(Xf,Yf)

        la = - math.sin(yaw)*(p.x-Xf)
        lb = + math.cos(yaw)*(p.y-Yf)
        #print "la,lb  %f %f" %(la,lb)

        #Control law
        LatError = - math.sin(yaw)*(p.x-Xf) + math.cos(yaw)*(p.y-Yf)
        yawcontrol = math.sin(ANGe) + ((self.K * LatError) / self.Vel)
        #print "%f + %f" %(math.sin(ANGe),((self.K * LatError) / self.Vel))
        #print "= yacontrol %f" %yawcontrol
        #yawcontrol = (yawcontrol / (math.pi/4)) #Normalizar yawcontrol para poder enviarlo
        #print yawcontrol

        if (math.fabs(dz) > 0.1 and self.distance(pose3d) < 0.07) :
            self.Vel = 0

        vz = 0
        uz = (self.path[self.step+1].z - pose3d.z)
        if (math.fabs(uz) < 1) :
            vz = uz*0.4
        else :
            vz = np.sign(uz)*0.5

        print "#####"
        """
        uy = uy * self.Vel
        ux = ux * self.Vel
        uz = uz * self.Vel
        uw = yaw_d * self.AngVel
        """

        self.interface.sendCMDVel(self.Vel, 0, vz, yawcontrol)


    def setVel(self, v, w):
        self.Vel = v
        self.AngVel = w

    def setAngVel(self, w):
        self.AngVel = w

    def setLinVel(self, v):
        self.Vel = v

    def qtoyaw(self, q0,q1,q2,q3):
        #Transforms quaternions to (yaw,pitch,roll)
        yaw = math.atan2(2.0*(q0*q3 + q1*2), 1 - 2*(q2*q2 + q3*q3));
        return yaw  #[-pi,pi]

    def distance(self, pose3d):
        #Distance between drone position and next point
        path = self.path[self.step]
        d = math.sqrt((pose3d.x - path.x)**2 + (pose3d.y - path.y)**2) #+ (pose3d.z - path.z)**2)
        return d






    def errormatrix(self, pose3d, yaw):
        p = self.path[self.step]
        A = [[math.cos(p.q0), math.sin(p.q0), 0],
            [-math.sin(p.q0), math.cos(p.q0), 0]
            [0, 0, 1]]
        B = [[p.x - pose3d.x], [p.y - pose3d.y], [p.q0 - yaw]]
        return np.dot(A,B)










