------------------------------------------------------------------------
r60 | mazafrav | 2017-06-12 19:29:36 +0200 (lun 12 de jun de 2017) | 2 líneas

[manuel] FUNCIONA (voy a hacerle algunos cambios, pero funciona)


Index: gui.py
===================================================================
--- gui.py	(revisión: 59)
+++ gui.py	(revisión: 60)
@@ -357,17 +357,17 @@
     def drone(self):
         #Draws drone position
         glDisable(GL_COLOR_MATERIAL)
-        yaw = self.qtoyaw(self.pose3d.q0,self.pose3d.q1,
-            self.pose3d.q2,self.pose3d.q3)
+        #yaw = self.qtoyaw(self.pose3d.q0,self.pose3d.q1,
+        #    self.pose3d.q2,self.pose3d.q3)
 
         #HAY QUE CORREGIR YAW DE AUTOLOC
-        '''
+        yaw = self.pose3d.q2
         yaw += (math.pi / 2)
         while (yaw < -math.pi):
             yaw += 2*math.pi
         while (yaw > math.pi):
             yaw -= 2*math.pi
-        '''
+        yaw = math.degrees(yaw)
 
 
 

------------------------------------------------------------------------
r59 | mazafrav | 2017-06-12 10:25:55 +0200 (lun 12 de jun de 2017) | 2 líneas

[manuel] fixed pilot, now it navigates properly.


Index: gui.py
===================================================================
--- gui.py	(revisión: 58)
+++ gui.py	(revisión: 59)
@@ -68,6 +68,8 @@
         self.imgLabel=QtGui.QLabel(self)
         self.imgLabel.setMinimumSize(250,250)
         self.imgLabel.setMaximumSize(250,250)
+        self.imgLabel.setScaledContents(True)
+        self.imgLabel.setMinimumSize(1,1)
         self.imgLabel.show()
 
         self.plotWidget = pg.GraphicsWindow()
@@ -169,8 +171,6 @@
     def update(self):
         pose3d = self.interface.getPose3D()
         self.glWidget.setPose3D(pose3d)
-        realpose3d = self.interface.getRealPose3D()
-        self.glWidget.setRealPose3D(realpose3d)
         self.glWidget.update()
         image = self.interface.getImage()
         #self.posText.setText("Position: \n(%f, %f, %f)"
@@ -179,9 +179,9 @@
             self.poseErrordata = np.roll(self.poseErrordata, -1)
             self.angleErrordata = np.roll(self.angleErrordata, -1)
         else : self.ptr += 1
-        self.poseErrordata[self.ptr] = self.poseError(realpose3d, pose3d)
-        self.angleErrordata[self.ptr] = self.angleError(realpose3d, pose3d)
-        if image != None:
+        #self.poseErrordata[self.ptr] = self.poseError(realpose3d, pose3d)
+        #self.angleErrordata[self.ptr] = self.angleError(realpose3d, pose3d)
+        if not (image is None):
             self.emit(QtCore.SIGNAL("NewImg"), image)
 
     def update_img(self, image):
@@ -189,6 +189,7 @@
         #size=QtCore.QSize(image.shape[1],image.shape[0])
         #self.imgLabel.resize(size)
         self.imgLabel.setPixmap(QtGui.QPixmap.fromImage(img))
+
         self.poseErrorcurve.setData(self.poseErrordata)
         self.angleErrorcurve.setData(self.angleErrordata)
 
@@ -195,7 +196,8 @@
     def poseError(self, pose3d1, pose3d2):
         d = math.sqrt((pose3d1.x - pose3d2.x)**2 + (pose3d1.x - pose3d2.x)**2 + (pose3d1.x - pose3d2.x)**2)
         return d
-        
+
+    '''
     def angleError(self, pose3d1, pose3d2):
         (r1,p1,y1) = self.qtorpy(pose3d1)
         (r2,p2,y2) = self.qtorpy(pose3d2)
@@ -212,7 +214,18 @@
         while (angDifference > math.pi):
             angDifference = angDifference - 2*math.pi
         return angDifference
+    '''
 
+    def angleError(self, pose3d1,pose3d2):
+        (r1,p1,y1) = self.qtorpy(pose3d1)
+        (r2,p2,y2) = self.qtorpy(pose3d2)
+        ANGe = y1 - y2
+        while (ANGe < -math.pi):
+            ANGe = ANGe + 2*math.pi
+        while (ANGe > math.pi):
+            ANGe = ANGe - 2*math.pi
+        return ANGe
+
     def qtorpy(self, pose):
         #Transforms quaternions to (roll,pitch,yaw) 
         roll = math.atan2(2*(pose.q0*pose.q1 + pose.q2*pose.q3), 1 - 2*(pose.q1**2 + pose.q2**2))
@@ -228,9 +241,7 @@
     def __init__(self, parent=None):
         super(GLWidget, self).__init__(parent)
         self.pose3d = None
-        self.realpose3d = None
-        self.trailbuff = RingBuffer(250)
-        self.realtrailbuff = RingBuffer(150)
+        self.trailbuff = RingBuffer(300)
         self.path = []
         self.loadpath()
         self.viewpoint = True
@@ -275,7 +286,6 @@
         self.axis()
         self.floor()
         self.trail()
-        self.realtrail()
         self.route()
         if self.pose3d != None :
             self.drone()
@@ -285,16 +295,10 @@
     def setPose3D(self, pose3d):
         self.pose3d = pose3d
         if self.pose3d != None :
-            self.trailbuff.append(self.pose3d)
-        
-
-    def setRealPose3D(self, pose3d):
-        self.realpose3d = pose3d
-        if self.realpose3d != None :
             self.dX = pose3d.x
             self.dY = pose3d.y
             self.dZ = pose3d.z
-            self.realtrailbuff.append(self.realpose3d)
+            self.trailbuff.append(self.pose3d)
 
     def initializeGL(self):
         glClearColor(0.6, 0.6, 0.6, 1);
@@ -353,8 +357,20 @@
     def drone(self):
         #Draws drone position
         glDisable(GL_COLOR_MATERIAL)
-        yaw = self.qtoyaw(self.realpose3d.q0,self.realpose3d.q1,
-            self.realpose3d.q2,self.realpose3d.q3)
+        yaw = self.qtoyaw(self.pose3d.q0,self.pose3d.q1,
+            self.pose3d.q2,self.pose3d.q3)
+
+        #HAY QUE CORREGIR YAW DE AUTOLOC
+        '''
+        yaw += (math.pi / 2)
+        while (yaw < -math.pi):
+            yaw += 2*math.pi
+        while (yaw > math.pi):
+            yaw -= 2*math.pi
+        '''
+
+
+
         glPushMatrix();
         glTranslate(self.dX,self.dY,self.dZ)
         glRotatef(yaw,0,0,1)
@@ -369,13 +385,6 @@
         for x in range(1,self.trailbuff.getlen()-1):
             self.drawTrailLine(self.trailbuff.get(x),self.trailbuff.get(x+1))
 
-    def realtrail(self):
-        #Draws drone's movement trail
-        glLineWidth(2)
-        glColor3f(0.15, 0.15, 0.5)
-        for x in range(1,self.realtrailbuff.getlen()-1):
-            self.drawTrailLine(self.realtrailbuff.get(x),self.realtrailbuff.get(x+1))
-
     def route(self):
         glLineWidth(2)
         glColor3f(0.7, 0.3, 0.3)

------------------------------------------------------------------------
r47 | mazafrav | 2017-04-03 20:51:55 +0200 (lun 03 de abr de 2017) | 2 líneas

[manuel] added beta python kalman filter, enhanced cam_autoloc (kalman parameters, thread parameters)


Index: gui.py
===================================================================
--- gui.py	(revisión: 46)
+++ gui.py	(revisión: 47)
@@ -8,12 +8,10 @@
 from PyQt4 import QtCore, QtGui, QtOpenGL
 from collada import *
 from .OBJFile import OBJFile
-import itertools
 import math
 import jderobot
 import numpy as np
 import sys
-import pickle
 import pyqtgraph as pg
 
 
@@ -23,37 +21,44 @@
         super(Gui, self).__init__()
 
         self.setWindowTitle('Drone Navigator')
-        self.setMinimumSize(740,780)
-        self.setMaximumSize(740,780)
+        self.setMinimumSize(750,800)
+        self.setMaximumSize(750,800)
 
         self.startButton = QtGui.QPushButton("Start")
-        self.startButton.setMinimumSize(250,40)
-        self.startButton.setMaximumSize(250,40)
+        self.startButton.setMinimumSize(250,38)
+        self.startButton.setMaximumSize(250,38)
         self.startButton.setParent(self)
         self.startButton.clicked.connect(self.startdrone)
 
         self.pauseButton = QtGui.QPushButton("Pause")
-        self.pauseButton.setMinimumSize(120,40)
-        self.pauseButton.setMaximumSize(120,40)
+        self.pauseButton.setMinimumSize(250,38)
+        self.pauseButton.setMaximumSize(250,38)
         self.pauseButton.setParent(self)
         self.pauseButton.clicked.connect(self.pausedrone)
 
         self.landButton = QtGui.QPushButton("Land")
-        self.landButton.setMinimumSize(120,40)
-        self.landButton.setMaximumSize(120,40)
+        self.landButton.setMinimumSize(120,38)
+        self.landButton.setMaximumSize(120,38)
         self.landButton.setParent(self)
         self.landButton.clicked.connect(self.landdrone)
 
+        self.takeoffButton = QtGui.QPushButton("Take Off")
+        self.takeoffButton.setMinimumSize(120,38)
+        self.takeoffButton.setMaximumSize(120,38)
+        self.takeoffButton.setParent(self)
+        self.takeoffButton.clicked.connect(self.takeoffdrone)
+
         self.changeView = QtGui.QPushButton("Change View")
-        self.changeView.setMinimumSize(250,40)
-        self.changeView.setMaximumSize(250,40)
+        self.changeView.setMinimumSize(120,38)
+        self.changeView.setMaximumSize(120,38)
         self.changeView.setParent(self)
         self.changeView.clicked.connect(self.changeViewpoint)
 
-        self.posText = QtGui.QLabel(self)
-        self.posText.setMinimumSize(250,60)
-        self.posText.setMaximumSize(250,60)
-        self.posText.show()
+        self.toggleCam = QtGui.QPushButton("Toggle Cam")
+        self.toggleCam.setMinimumSize(120,38)
+        self.toggleCam.setMaximumSize(120,38)
+        self.toggleCam.setParent(self)
+        self.toggleCam.clicked.connect(self.togglecam)
 
         self.glWidget = GLWidget()
         self.glWidget.setMinimumSize(450,450)
@@ -90,25 +95,38 @@
         self.ptr = 0      
         self.connect(self, QtCore.SIGNAL("NewImg"), self.update_img)
 
-        HButtonLayout = QtGui.QHBoxLayout()
-        HButtonLayout.addStretch(1)
-        HButtonLayout.addWidget(self.landButton)
-        HButtonLayout.addStretch(1)
-        HButtonLayout.addWidget(self.pauseButton)
-        HButtonLayout.addStretch(1)
+        HButtonLayout1 = QtGui.QHBoxLayout()
+        HButtonLayout1.addStretch(1)
+        HButtonLayout1.addWidget(self.takeoffButton)
+        HButtonLayout1.addStretch(1)
+        HButtonLayout1.addWidget(self.landButton)
+        HButtonLayout1.addStretch(1)
 
+        HButtonLayout2 = QtGui.QHBoxLayout()
+        HButtonLayout2.addStretch(1)
+        HButtonLayout2.addWidget(self.changeView)
+        HButtonLayout2.addStretch(1)
+        HButtonLayout2.addWidget(self.toggleCam)
+        HButtonLayout2.addStretch(1)
+
+        VLayoutButtons = QtGui.QVBoxLayout()
+        VLayoutButtons.addStretch(1)
+        VLayoutButtons.addWidget(self.startButton)
+        VLayoutButtons.addStretch(1)
+        VLayoutButtons.addWidget(self.pauseButton)
+        VLayoutButtons.addStretch(1)
+        VLayoutButtons.addLayout(HButtonLayout1)
+        VLayoutButtons.addStretch(1)
+        VLayoutButtons.addLayout(HButtonLayout2)
+        VLayoutButtons.addStretch(1)
+
+
         VLayout = QtGui.QVBoxLayout()
         VLayout.addStretch(1)
         VLayout.addWidget(self.imgLabel)
         VLayout.addStretch(1)
-        VLayout.addWidget(self.startButton)
+        VLayout.addLayout(VLayoutButtons)
         VLayout.addStretch(1)
-        VLayout.addLayout(HButtonLayout)
-        VLayout.addStretch(1)
-        VLayout.addWidget(self.changeView)
-        VLayout.addStretch(1)
-        VLayout.addWidget(self.posText)
-        VLayout.addStretch(1)
 
         HLayout = QtGui.QHBoxLayout()
         HLayout.addStretch(1)
@@ -142,6 +160,12 @@
     def changeViewpoint(self):
         self.glWidget.toggleView()
 
+    def takeoffdrone(self):
+        self.interface.takeoffdrone()
+
+    def togglecam(self):
+        self.interface.togglecam()
+
     def update(self):
         pose3d = self.interface.getPose3D()
         self.glWidget.setPose3D(pose3d)
@@ -149,8 +173,8 @@
         self.glWidget.setRealPose3D(realpose3d)
         self.glWidget.update()
         image = self.interface.getImage()
-        self.posText.setText("Position: \n(%f, %f, %f)"
-            %(pose3d.x, pose3d.y, pose3d.z))
+        #self.posText.setText("Position: \n(%f, %f, %f)"
+        #    %(pose3d.x, pose3d.y, pose3d.z))
         if self.ptr == 249 :
             self.poseErrordata = np.roll(self.poseErrordata, -1)
             self.angleErrordata = np.roll(self.angleErrordata, -1)

------------------------------------------------------------------------
r44 | mazafrav | 2017-03-05 18:54:58 +0100 (dom 05 de mar de 2017) | 2 líneas

[manu] finished upgrade to 16.04,python3,qt5 and new dependencies. cam_autoloc in work


Index: gui.py
===================================================================
--- gui.py	(revisión: 43)
+++ gui.py	(revisión: 44)
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+#!/usr/bin/env python3
 
 from PyQt4 import QtGui
 from PyQt4.QtOpenGL import *
@@ -5,13 +6,14 @@
 from OpenGL.GL import *
 from OpenGL.GLU import *
 from PyQt4 import QtCore, QtGui, QtOpenGL
-import collada
+from collada import *
+from .OBJFile import OBJFile
+import itertools
 import math
 import jderobot
 import numpy as np
 import sys
 import pickle
-import OBJFile
 import pyqtgraph as pg
 
 
@@ -73,11 +75,16 @@
         self.poseErrorplot.setRange(yRange=[0,3])
         self.poseErrorplot.showGrid(y=True)
         self.poseErrordata =np.zeros(250) 
-        self.angleErrordata =np.zeros(250) 
         self.poseErrorplot.addLegend()
         self.poseErrorcurve = self.poseErrorplot.plot(self.poseErrordata, pen=(255,0,0),
             name="Pose3D Error")
-        self.angleErrorcurve = self.poseErrorplot.plot(self.angleErrordata, pen=(0,255,0),
+        self.angleErrordata =np.zeros(250) 
+        self.angleErrorplot = self.plotWidget.addPlot()
+        self.angleErrorplot.showAxis('bottom', False)
+        self.angleErrorplot.setRange(yRange=[0,180])
+        self.angleErrorplot.showGrid(y=True)
+        self.angleErrorplot.addLegend()
+        self.angleErrorcurve = self.angleErrorplot.plot(self.angleErrordata, pen=(0,255,0),
             name="Angle Error")
 
         self.ptr = 0      
@@ -166,10 +173,30 @@
         return d
         
     def angleError(self, pose3d1, pose3d2):
-        e = math.sqrt((pose3d1.q0 - pose3d2.q0)**2 + (pose3d1.q1 - pose3d2.q1)**2 + (pose3d1.q2 - pose3d2.q2)**2 + (pose3d1.q3 - pose3d2.q3)**2)
-        return e
+        (r1,p1,y1) = self.qtorpy(pose3d1)
+        (r2,p2,y2) = self.qtorpy(pose3d2)
 
+        e = math.sqrt((self.angleDiff(r1,r2))**2 + (self.angleDiff(p1,p2))**2 + (self.angleDiff(y1,y2))**2)
+        if (e > math.pi) :
+            e = 2*math.pi - e
+        return math.degrees(e)
 
+    def angleDiff(self, a1, a2):
+        angDifference = a1 - a2
+        while (angDifference < -math.pi):
+            angDifference = angDifference + 2*math.pi
+        while (angDifference > math.pi):
+            angDifference = angDifference - 2*math.pi
+        return angDifference
+
+    def qtorpy(self, pose):
+        #Transforms quaternions to (roll,pitch,yaw) 
+        roll = math.atan2(2*(pose.q0*pose.q1 + pose.q2*pose.q3), 1 - 2*(pose.q1**2 + pose.q2**2))
+        pitch = math.asin(2*(pose.q0*pose.q2 - pose.q3*pose.q1))
+        yaw = math.atan2(2.0*(pose.q0*pose.q3 + pose.q1*2), 1 - 2*(pose.q2*pose.q2 + pose.q3*pose.q3))
+        return (roll,pitch,yaw)  #[degrees]
+
+
 # OPENGL WIDGET CLASS
 
 class GLWidget(QtOpenGL.QGLWidget):
@@ -180,6 +207,7 @@
         self.realpose3d = None
         self.trailbuff = RingBuffer(250)
         self.realtrailbuff = RingBuffer(150)
+        self.path = []
         self.loadpath()
         self.viewpoint = True
         self.view_d = 20.0
@@ -188,7 +216,7 @@
         self.eyey = 0.0
         self.eyez = abs(self.view_d * math.cos(self.view_ang))
         self.rot = 20.0 #degrees
-        self.drone3d = OBJFile.OBJFile('gui/quadrotor/blender/quadrotor_CAD2.obj')
+        self.drone3d = OBJFile('gui/quadrotor/blender/quadrotor_CAD2.obj')
 
     def loadpath(self):
         a = []
@@ -325,40 +353,21 @@
             self.drawTrailLine(self.realtrailbuff.get(x),self.realtrailbuff.get(x+1))
 
     def route(self):
-        #Draws drone's path
-        #glLineWidth(1)
-        #glColor3f(0.7, 0.3, 0.3)
-        #for x in range(1,self.routbuff.getlen()-1):
-        #    self.drawTrailLine(self.routbuff.get(x),self.routbuff.get(x+1))
-        p = list(self.path)
         glLineWidth(2)
         glColor3f(0.7, 0.3, 0.3)
-        glPointSize(2)
-        #print '%f' %self.path[0].x
-        for i in range(1, len(p)):
-            pose0 = p[i-1]
-            pose1 = p[i]
+        glPointSize(3)
+        glLineWidth(1)
+        for pose0, pose1 in zip(self.path, self.path[1:]) :
+            glBegin(GL_POINTS)
+            glVertex(pose0.x,pose0.y,pose0.z)
+            glEnd()
             glBegin(GL_LINES)
             #print 'pintando ruta?? %f' %pose1.x
             glVertex3f(pose1.x,pose1.y,pose1.z)
             glVertex3f(pose0.x,pose0.y,pose0.z)
             glEnd()
-            (pose0.x, pose0.y, pose0.z) = (pose1.x, pose1.y, pose1.z)
-        '''
+            #print pose.x
 
-        (xx, yy, zz) = self.routbuff[0]
-
-        for (x,y,z) in self.routbuff:
-            glBegin(GL_POINTS)
-            glVertex(x,y,z)
-            glEnd()
-            glBegin(GL_LINES)
-            glVertex3f(x,y,z)
-            glVertex3f(xx,yy,zz)
-            glEnd()
-            (xx, yy, zz) = (x, y, z)
-        '''
-
     def drawTrailLine(self, poseA, poseB):
         #Draws line between two given pose3D data structures
         glBegin(GL_LINES)
@@ -367,8 +376,8 @@
         glEnd()
 
     def qtoyaw(self, q0,q1,q2,q3):
-        #Transforms quaternions to (yaw,pitch,roll) 
-        yaw = math.atan2(2.0*(q0*q3 + q1*2), 1 - 2*(q2*q2 + q3*q3));
+        #Transforms quaternions to yaw
+        yaw = math.atan2(2.0*(q0*q3 + q1*2), 1 - 2*(q2**2 + q3**2))
         return math.degrees(yaw)  #[degrees]
 
     def toggleView(self):

------------------------------------------------------------------------
r39 | mazafrav | 2016-11-27 19:30:35 +0100 (dom 27 de nov de 2016) | 2 líneas

[manu] modificado forma en la que se trata el archivo de ruta


Index: gui.py
===================================================================
--- gui.py	(revisión: 38)
+++ gui.py	(revisión: 39)
@@ -192,8 +192,8 @@
 
     def loadpath(self):
         a = []
-        pose = jderobot.Pose3DData()
         for line in open('path.txt','r').readlines():
+            pose = jderobot.Pose3DData()
             line = line.rstrip('\n')
             linelist = line.split()
             #print linelist[0]
@@ -201,9 +201,9 @@
             pose.y = float(linelist[1])
             pose.z = float(linelist[2])
             a.append(pose)
-        print 'pintando ruta?? %f' %a[5].x
-        self.path = np.asarray(a)
-        print 'pintando ruta?? %f' %self.path[5].x
+        #print 'pintando ruta?? %f' %a[5].x
+        self.path = list(a)
+        #print 'pintando ruta?? %f' %self.path[5].x
 
     def paintGL(self):
 
@@ -228,7 +228,7 @@
         if self.pose3d != None :
             self.drone()
         self.swapBuffers()
-        print '%f' %self.path[0].x
+        #print '%f' %self.path[0].x
 
     def setPose3D(self, pose3d):
         self.pose3d = pose3d
@@ -330,15 +330,14 @@
         #glColor3f(0.7, 0.3, 0.3)
         #for x in range(1,self.routbuff.getlen()-1):
         #    self.drawTrailLine(self.routbuff.get(x),self.routbuff.get(x+1))
-
+        p = list(self.path)
         glLineWidth(2)
         glColor3f(0.7, 0.3, 0.3)
         glPointSize(2)
         #print '%f' %self.path[0].x
-
-        for i in range(1, self.path.size):
-            pose0 = self.path[i-1]
-            pose1 = self.path[i]
+        for i in range(1, len(p)):
+            pose0 = p[i-1]
+            pose1 = p[i]
             glBegin(GL_LINES)
             #print 'pintando ruta?? %f' %pose1.x
             glVertex3f(pose1.x,pose1.y,pose1.z)

------------------------------------------------------------------------
r38 | mazafrav | 2016-11-21 08:30:53 +0100 (lun 21 de nov de 2016) | 2 líneas

[manuel] Changes to path loading system and steering control in process


Index: gui.py
===================================================================
--- gui.py	(revisión: 37)
+++ gui.py	(revisión: 38)
@@ -7,6 +7,7 @@
 from PyQt4 import QtCore, QtGui, QtOpenGL
 import collada
 import math
+import jderobot
 import numpy as np
 import sys
 import pickle
@@ -66,16 +67,20 @@
         pg.setConfigOptions(antialias=True)
         self.plotWidget.setMinimumSize(720,300)
         self.plotWidget.setMaximumSize(720,300)
-        self.errorplot = self.plotWidget.addPlot(title="Error Monitoring")
-        self.errorplot.showAxis('bottom', False)
-        self.errorplot.setRange(yRange=[0,3])
-        self.errorplot.showGrid(y=True)
-        self.errordata =np.zeros(250) 
-        self.errorplot.addLegend()
-        self.errorcurve = self.errorplot.plot(self.errordata, pen=(255,0,0),
-            name="Pose3D Error", clear=True)
-        self.ptr = 0
-               
+
+        self.poseErrorplot = self.plotWidget.addPlot()
+        self.poseErrorplot.showAxis('bottom', False)
+        self.poseErrorplot.setRange(yRange=[0,3])
+        self.poseErrorplot.showGrid(y=True)
+        self.poseErrordata =np.zeros(250) 
+        self.angleErrordata =np.zeros(250) 
+        self.poseErrorplot.addLegend()
+        self.poseErrorcurve = self.poseErrorplot.plot(self.poseErrordata, pen=(255,0,0),
+            name="Pose3D Error")
+        self.angleErrorcurve = self.poseErrorplot.plot(self.angleErrordata, pen=(0,255,0),
+            name="Angle Error")
+
+        self.ptr = 0      
         self.connect(self, QtCore.SIGNAL("NewImg"), self.update_img)
 
         HButtonLayout = QtGui.QHBoxLayout()
@@ -135,16 +140,16 @@
         self.glWidget.setPose3D(pose3d)
         realpose3d = self.interface.getRealPose3D()
         self.glWidget.setRealPose3D(realpose3d)
-        route = self.interface.getRoute()
-        self.glWidget.setRoute(route)
         self.glWidget.update()
         image = self.interface.getImage()
         self.posText.setText("Position: \n(%f, %f, %f)"
             %(pose3d.x, pose3d.y, pose3d.z))
         if self.ptr == 249 :
-            self.errordata = np.roll(self.errordata, -1)
+            self.poseErrordata = np.roll(self.poseErrordata, -1)
+            self.angleErrordata = np.roll(self.angleErrordata, -1)
         else : self.ptr += 1
-        self.errordata[self.ptr] = self.poseError(realpose3d, pose3d)
+        self.poseErrordata[self.ptr] = self.poseError(realpose3d, pose3d)
+        self.angleErrordata[self.ptr] = self.angleError(realpose3d, pose3d)
         if image != None:
             self.emit(QtCore.SIGNAL("NewImg"), image)
 
@@ -153,15 +158,18 @@
         #size=QtCore.QSize(image.shape[1],image.shape[0])
         #self.imgLabel.resize(size)
         self.imgLabel.setPixmap(QtGui.QPixmap.fromImage(img))
-        self.errorcurve.setData(self.errordata)
+        self.poseErrorcurve.setData(self.poseErrordata)
+        self.angleErrorcurve.setData(self.angleErrordata)
 
     def poseError(self, pose3d1, pose3d2):
         d = math.sqrt((pose3d1.x - pose3d2.x)**2 + (pose3d1.x - pose3d2.x)**2 + (pose3d1.x - pose3d2.x)**2)
         return d
         
+    def angleError(self, pose3d1, pose3d2):
+        e = math.sqrt((pose3d1.q0 - pose3d2.q0)**2 + (pose3d1.q1 - pose3d2.q1)**2 + (pose3d1.q2 - pose3d2.q2)**2 + (pose3d1.q3 - pose3d2.q3)**2)
+        return e
 
 
-
 # OPENGL WIDGET CLASS
 
 class GLWidget(QtOpenGL.QGLWidget):
@@ -172,8 +180,7 @@
         self.realpose3d = None
         self.trailbuff = RingBuffer(250)
         self.realtrailbuff = RingBuffer(150)
-        #self.routbuff = RingBuffer(250)
-        self.routbuff = []
+        self.loadpath()
         self.viewpoint = True
         self.view_d = 20.0
         self.view_ang = math.radians(60.0)
@@ -183,6 +190,46 @@
         self.rot = 20.0 #degrees
         self.drone3d = OBJFile.OBJFile('gui/quadrotor/blender/quadrotor_CAD2.obj')
 
+    def loadpath(self):
+        a = []
+        pose = jderobot.Pose3DData()
+        for line in open('path.txt','r').readlines():
+            line = line.rstrip('\n')
+            linelist = line.split()
+            #print linelist[0]
+            pose.x = float(linelist[0])
+            pose.y = float(linelist[1])
+            pose.z = float(linelist[2])
+            a.append(pose)
+        print 'pintando ruta?? %f' %a[5].x
+        self.path = np.asarray(a)
+        print 'pintando ruta?? %f' %self.path[5].x
+
+    def paintGL(self):
+
+        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
+        #glMatrixMode(GL_PROJECTION) # Select The Projection Matrix
+        glMatrixMode(GL_MODELVIEW)
+        glLoadIdentity()
+        if self.viewpoint == True :
+            gluLookAt( self.eyex,self.eyey,self.eyez, 0,0,0, 0,0,1)
+            glRotatef( self.rot, 0, 0, 1 )
+        else :
+            gluLookAt( self.dX + self.view_d*math.cos(15) ,
+                        self.dY + self.view_d*math.cos(15) ,
+                        self.dZ + self.view_d*math.sin(15) ,
+                        self.dX, self.dY, self.dZ,
+                        0,0,1)
+        self.axis()
+        self.floor()
+        self.trail()
+        self.realtrail()
+        self.route()
+        if self.pose3d != None :
+            self.drone()
+        self.swapBuffers()
+        print '%f' %self.path[0].x
+
     def setPose3D(self, pose3d):
         self.pose3d = pose3d
         if self.pose3d != None :
@@ -197,11 +244,6 @@
             self.dZ = pose3d.z
             self.realtrailbuff.append(self.realpose3d)
 
-    def setRoute(self, pose3d):
-        if pose3d != None :
-            #self.routbuff.append(pose3d)
-            self.routbuff = pose3d
-
     def initializeGL(self):
         glClearColor(0.6, 0.6, 0.6, 1);
 
@@ -223,33 +265,6 @@
         glRotatef( self.rot, 0, 0, 1 )
 
 
-    def paintGL(self):
-
-
-        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
-        #glMatrixMode(GL_PROJECTION) # Select The Projection Matrix
-        glMatrixMode(GL_MODELVIEW)
-        glLoadIdentity()
-        if self.viewpoint == True :
-            gluLookAt( self.eyex,self.eyey,self.eyez, 0,0,0, 0,0,1)
-            glRotatef( self.rot, 0, 0, 1 )
-        else :
-            gluLookAt( self.dX + self.view_d*math.cos(15) ,
-                        self.dY + self.view_d*math.cos(15) ,
-                        self.dZ + self.view_d*math.sin(15) ,
-                        self.dX, self.dY, self.dZ,
-                        0,0,1)
-        self.axis()
-        self.floor()
-        self.trail()
-        self.realtrail()
-        if self.routbuff != None :
-            self.route()
-        if self.pose3d != None :
-            self.drone()
-        self.swapBuffers()
-
-
     def axis(self):
         #Draws 3d axis
         glLineWidth(2)
@@ -315,9 +330,23 @@
         #glColor3f(0.7, 0.3, 0.3)
         #for x in range(1,self.routbuff.getlen()-1):
         #    self.drawTrailLine(self.routbuff.get(x),self.routbuff.get(x+1))
+
         glLineWidth(2)
         glColor3f(0.7, 0.3, 0.3)
         glPointSize(2)
+        #print '%f' %self.path[0].x
+
+        for i in range(1, self.path.size):
+            pose0 = self.path[i-1]
+            pose1 = self.path[i]
+            glBegin(GL_LINES)
+            #print 'pintando ruta?? %f' %pose1.x
+            glVertex3f(pose1.x,pose1.y,pose1.z)
+            glVertex3f(pose0.x,pose0.y,pose0.z)
+            glEnd()
+            (pose0.x, pose0.y, pose0.z) = (pose1.x, pose1.y, pose1.z)
+        '''
+
         (xx, yy, zz) = self.routbuff[0]
 
         for (x,y,z) in self.routbuff:
@@ -329,6 +358,7 @@
             glVertex3f(xx,yy,zz)
             glEnd()
             (xx, yy, zz) = (x, y, z)
+        '''
 
     def drawTrailLine(self, poseA, poseB):
         #Draws line between two given pose3D data structures

------------------------------------------------------------------------
r36 | mazafrav | 2016-11-05 10:52:32 +0100 (sáb 05 de nov de 2016) | 1 línea



Index: gui.py
===================================================================
--- gui.py	(revisión: 35)
+++ gui.py	(revisión: 36)
@@ -24,8 +24,8 @@
         self.setMaximumSize(740,780)
 
         self.startButton = QtGui.QPushButton("Start")
-        self.startButton.setMinimumSize(120,40)
-        self.startButton.setMaximumSize(120,40)
+        self.startButton.setMinimumSize(250,40)
+        self.startButton.setMaximumSize(250,40)
         self.startButton.setParent(self)
         self.startButton.clicked.connect(self.startdrone)
 
@@ -35,6 +35,12 @@
         self.pauseButton.setParent(self)
         self.pauseButton.clicked.connect(self.pausedrone)
 
+        self.landButton = QtGui.QPushButton("Land")
+        self.landButton.setMinimumSize(120,40)
+        self.landButton.setMaximumSize(120,40)
+        self.landButton.setParent(self)
+        self.landButton.clicked.connect(self.landdrone)
+
         self.changeView = QtGui.QPushButton("Change View")
         self.changeView.setMinimumSize(250,40)
         self.changeView.setMaximumSize(250,40)
@@ -42,8 +48,8 @@
         self.changeView.clicked.connect(self.changeViewpoint)
 
         self.posText = QtGui.QLabel(self)
-        self.posText.setMinimumSize(250,100)
-        self.posText.setMaximumSize(250,100)
+        self.posText.setMinimumSize(250,60)
+        self.posText.setMaximumSize(250,60)
         self.posText.show()
 
         self.glWidget = GLWidget()
@@ -60,15 +66,21 @@
         pg.setConfigOptions(antialias=True)
         self.plotWidget.setMinimumSize(720,300)
         self.plotWidget.setMaximumSize(720,300)
-        self.errorplot = self.plotWidget.addPlot(title="Error")
-        self.errordata =np.zeros(100) 
-        self.errorplot.plot(self.errordata, pen=(255,0,0), name="Red curve", clear=True)
+        self.errorplot = self.plotWidget.addPlot(title="Error Monitoring")
+        self.errorplot.showAxis('bottom', False)
+        self.errorplot.setRange(yRange=[0,3])
+        self.errorplot.showGrid(y=True)
+        self.errordata =np.zeros(250) 
+        self.errorplot.addLegend()
+        self.errorcurve = self.errorplot.plot(self.errordata, pen=(255,0,0),
+            name="Pose3D Error", clear=True)
+        self.ptr = 0
                
         self.connect(self, QtCore.SIGNAL("NewImg"), self.update_img)
 
         HButtonLayout = QtGui.QHBoxLayout()
         HButtonLayout.addStretch(1)
-        HButtonLayout.addWidget(self.startButton)
+        HButtonLayout.addWidget(self.landButton)
         HButtonLayout.addStretch(1)
         HButtonLayout.addWidget(self.pauseButton)
         HButtonLayout.addStretch(1)
@@ -77,6 +89,8 @@
         VLayout.addStretch(1)
         VLayout.addWidget(self.imgLabel)
         VLayout.addStretch(1)
+        VLayout.addWidget(self.startButton)
+        VLayout.addStretch(1)
         VLayout.addLayout(HButtonLayout)
         VLayout.addStretch(1)
         VLayout.addWidget(self.changeView)
@@ -107,6 +121,9 @@
     def pausedrone(self):
         self.interface.pausedrone()
 
+    def landdrone(self):
+        self.interface.landdrone()
+
     def startdrone(self):
         self.interface.startdrone()
 
@@ -124,8 +141,10 @@
         image = self.interface.getImage()
         self.posText.setText("Position: \n(%f, %f, %f)"
             %(pose3d.x, pose3d.y, pose3d.z))
-        np.roll(self.errordata, 1)
-        self.errordata[0] = realpose3d.z
+        if self.ptr == 249 :
+            self.errordata = np.roll(self.errordata, -1)
+        else : self.ptr += 1
+        self.errordata[self.ptr] = self.poseError(realpose3d, pose3d)
         if image != None:
             self.emit(QtCore.SIGNAL("NewImg"), image)
 
@@ -134,7 +153,11 @@
         #size=QtCore.QSize(image.shape[1],image.shape[0])
         #self.imgLabel.resize(size)
         self.imgLabel.setPixmap(QtGui.QPixmap.fromImage(img))
-        self.errorplot.plot(self.errordata, pen=(255,0,0), name="Red curve", clear=True)
+        self.errorcurve.setData(self.errordata)
+
+    def poseError(self, pose3d1, pose3d2):
+        d = math.sqrt((pose3d1.x - pose3d2.x)**2 + (pose3d1.x - pose3d2.x)**2 + (pose3d1.x - pose3d2.x)**2)
+        return d
         
 
 
@@ -147,7 +170,7 @@
         super(GLWidget, self).__init__(parent)
         self.pose3d = None
         self.realpose3d = None
-        self.trailbuff = RingBuffer(150)
+        self.trailbuff = RingBuffer(250)
         self.realtrailbuff = RingBuffer(150)
         #self.routbuff = RingBuffer(250)
         self.routbuff = []
@@ -180,7 +203,7 @@
             self.routbuff = pose3d
 
     def initializeGL(self):
-        glClearColor(0.3, 0.3, 0.3, 1);
+        glClearColor(0.6, 0.6, 0.6, 1);
 
         glLightfv(GL_LIGHT0, GL_POSITION,  (-40, 200, 100, 0.0))
         glLightfv(GL_LIGHT0, GL_AMBIENT, (0.2, 0.2, 0.2, 1.0))
@@ -232,18 +255,18 @@
         glLineWidth(2)
         glColor3f(1.0, 0.0, 0.0)
         glBegin(GL_LINES)
-        glVertex3f(0, 0, 0)
-        glVertex3f(5, 0, 0)
+        glVertex3f(0, 0, 0.001)
+        glVertex3f(5, 0, 0.001)
         glEnd()
         glColor3f(0.0, 1.0, 0.0)
         glBegin(GL_LINES)
-        glVertex3f(0, 0, 0)
-        glVertex3f(0, 5, 0)
+        glVertex3f(0, 0, 0.001)
+        glVertex3f(0, 5, 0.001)
         glEnd()
         glColor3f(0.0, 0.0, 1.0)
         glBegin(GL_LINES)
-        glVertex3f(0, 0, 0)
-        glVertex3f(0, 0, 5)
+        glVertex3f(0, 0, 0.001)
+        glVertex3f(0, 0, 5.001)
         glEnd()
 
     def floor(self):
@@ -274,7 +297,7 @@
 
     def trail(self):
         #Draws drone's movement trail
-        glLineWidth(1)
+        glLineWidth(2)
         glColor3f(0.2, 0.5, 0.2)
         for x in range(1,self.trailbuff.getlen()-1):
             self.drawTrailLine(self.trailbuff.get(x),self.trailbuff.get(x+1))
@@ -281,8 +304,8 @@
 
     def realtrail(self):
         #Draws drone's movement trail
-        glLineWidth(1)
-        glColor3f(0.2, 0.2, 0.5)
+        glLineWidth(2)
+        glColor3f(0.15, 0.15, 0.5)
         for x in range(1,self.realtrailbuff.getlen()-1):
             self.drawTrailLine(self.realtrailbuff.get(x),self.realtrailbuff.get(x+1))
 
@@ -292,6 +315,7 @@
         #glColor3f(0.7, 0.3, 0.3)
         #for x in range(1,self.routbuff.getlen()-1):
         #    self.drawTrailLine(self.routbuff.get(x),self.routbuff.get(x+1))
+        glLineWidth(2)
         glColor3f(0.7, 0.3, 0.3)
         glPointSize(2)
         (xx, yy, zz) = self.routbuff[0]

------------------------------------------------------------------------
r35 | mazafrav | 2016-10-21 10:35:09 +0200 (vie 21 de oct de 2016) | 1 línea



Index: gui.py
===================================================================
--- gui.py	(revisión: 34)
+++ gui.py	(revisión: 35)
@@ -7,9 +7,11 @@
 from PyQt4 import QtCore, QtGui, QtOpenGL
 import collada
 import math
+import numpy as np
 import sys
 import pickle
 import OBJFile
+import pyqtgraph as pg
 
 
 class Gui(QtGui.QWidget):
@@ -18,15 +20,21 @@
         super(Gui, self).__init__()
 
         self.setWindowTitle('Drone Navigator')
-        self.setMinimumSize(780,470)
-        self.setMaximumSize(780,470)
+        self.setMinimumSize(740,780)
+        self.setMaximumSize(740,780)
 
-        self.changeCam = QtGui.QPushButton("Change Camera")
-        self.changeCam.setMinimumSize(250,40)
-        self.changeCam.setMaximumSize(250,40)
-        self.changeCam.setParent(self)
-        self.changeCam.clicked.connect(self.changeCamera)
+        self.startButton = QtGui.QPushButton("Start")
+        self.startButton.setMinimumSize(120,40)
+        self.startButton.setMaximumSize(120,40)
+        self.startButton.setParent(self)
+        self.startButton.clicked.connect(self.startdrone)
 
+        self.pauseButton = QtGui.QPushButton("Pause")
+        self.pauseButton.setMinimumSize(120,40)
+        self.pauseButton.setMaximumSize(120,40)
+        self.pauseButton.setParent(self)
+        self.pauseButton.clicked.connect(self.pausedrone)
+
         self.changeView = QtGui.QPushButton("Change View")
         self.changeView.setMinimumSize(250,40)
         self.changeView.setMaximumSize(250,40)
@@ -47,13 +55,29 @@
         self.imgLabel.setMinimumSize(250,250)
         self.imgLabel.setMaximumSize(250,250)
         self.imgLabel.show()
+
+        self.plotWidget = pg.GraphicsWindow()
+        pg.setConfigOptions(antialias=True)
+        self.plotWidget.setMinimumSize(720,300)
+        self.plotWidget.setMaximumSize(720,300)
+        self.errorplot = self.plotWidget.addPlot(title="Error")
+        self.errordata =np.zeros(100) 
+        self.errorplot.plot(self.errordata, pen=(255,0,0), name="Red curve", clear=True)
+               
         self.connect(self, QtCore.SIGNAL("NewImg"), self.update_img)
-        
+
+        HButtonLayout = QtGui.QHBoxLayout()
+        HButtonLayout.addStretch(1)
+        HButtonLayout.addWidget(self.startButton)
+        HButtonLayout.addStretch(1)
+        HButtonLayout.addWidget(self.pauseButton)
+        HButtonLayout.addStretch(1)
+
         VLayout = QtGui.QVBoxLayout()
         VLayout.addStretch(1)
         VLayout.addWidget(self.imgLabel)
         VLayout.addStretch(1)
-        VLayout.addWidget(self.changeCam)
+        VLayout.addLayout(HButtonLayout)
         VLayout.addStretch(1)
         VLayout.addWidget(self.changeView)
         VLayout.addStretch(1)
@@ -67,15 +91,25 @@
         HLayout.addWidget(self.glWidget)
         HLayout.addStretch(1)
 
-        self.setLayout(HLayout)
+        MainLayout = QtGui.QVBoxLayout()
+        MainLayout.addStretch(1)
+        MainLayout.addLayout(HLayout)
+        MainLayout.addStretch(1)
+        MainLayout.addWidget(self.plotWidget)
+        MainLayout.addStretch(1)
+
+        self.setLayout(MainLayout)
         
 
     def setInterface(self,interface):
         self.interface=interface
 
-    def changeCamera(self):
-        self.interface.toggleCam()
+    def pausedrone(self):
+        self.interface.pausedrone()
 
+    def startdrone(self):
+        self.interface.startdrone()
+
     def changeViewpoint(self):
         self.glWidget.toggleView()
 
@@ -82,14 +116,18 @@
     def update(self):
         pose3d = self.interface.getPose3D()
         self.glWidget.setPose3D(pose3d)
+        realpose3d = self.interface.getRealPose3D()
+        self.glWidget.setRealPose3D(realpose3d)
         route = self.interface.getRoute()
         self.glWidget.setRoute(route)
         self.glWidget.update()
         image = self.interface.getImage()
+        self.posText.setText("Position: \n(%f, %f, %f)"
+            %(pose3d.x, pose3d.y, pose3d.z))
+        np.roll(self.errordata, 1)
+        self.errordata[0] = realpose3d.z
         if image != None:
             self.emit(QtCore.SIGNAL("NewImg"), image)
-        self.posText.setText("Position: \n(%f, %f, %f)"
-            %(pose3d.x, pose3d.y, pose3d.z))
 
     def update_img(self, image):
         img = QtGui.QImage(image.data, image.shape[1], image.shape[0], QtGui.QImage.Format_RGB888)
@@ -96,10 +134,11 @@
         #size=QtCore.QSize(image.shape[1],image.shape[0])
         #self.imgLabel.resize(size)
         self.imgLabel.setPixmap(QtGui.QPixmap.fromImage(img))
+        self.errorplot.plot(self.errordata, pen=(255,0,0), name="Red curve", clear=True)
+        
 
 
 
-
 # OPENGL WIDGET CLASS
 
 class GLWidget(QtOpenGL.QGLWidget):
@@ -107,7 +146,9 @@
     def __init__(self, parent=None):
         super(GLWidget, self).__init__(parent)
         self.pose3d = None
+        self.realpose3d = None
         self.trailbuff = RingBuffer(150)
+        self.realtrailbuff = RingBuffer(150)
         #self.routbuff = RingBuffer(250)
         self.routbuff = []
         self.viewpoint = True
@@ -122,10 +163,16 @@
     def setPose3D(self, pose3d):
         self.pose3d = pose3d
         if self.pose3d != None :
+            self.trailbuff.append(self.pose3d)
+        
+
+    def setRealPose3D(self, pose3d):
+        self.realpose3d = pose3d
+        if self.realpose3d != None :
             self.dX = pose3d.x
             self.dY = pose3d.y
             self.dZ = pose3d.z
-            self.trailbuff.append(self.pose3d)
+            self.realtrailbuff.append(self.realpose3d)
 
     def setRoute(self, pose3d):
         if pose3d != None :
@@ -133,7 +180,7 @@
             self.routbuff = pose3d
 
     def initializeGL(self):
-        glClearColor(0.2, 0.2, 0.2, 1);
+        glClearColor(0.3, 0.3, 0.3, 1);
 
         glLightfv(GL_LIGHT0, GL_POSITION,  (-40, 200, 100, 0.0))
         glLightfv(GL_LIGHT0, GL_AMBIENT, (0.2, 0.2, 0.2, 1.0))
@@ -172,6 +219,7 @@
         self.axis()
         self.floor()
         self.trail()
+        self.realtrail()
         if self.routbuff != None :
             self.route()
         if self.pose3d != None :
@@ -215,7 +263,8 @@
     def drone(self):
         #Draws drone position
         glDisable(GL_COLOR_MATERIAL)
-        yaw = self.qtoyaw(self.pose3d.q0,self.pose3d.q1,self.pose3d.q2,self.pose3d.q3)
+        yaw = self.qtoyaw(self.realpose3d.q0,self.realpose3d.q1,
+            self.realpose3d.q2,self.realpose3d.q3)
         glPushMatrix();
         glTranslate(self.dX,self.dY,self.dZ)
         glRotatef(yaw,0,0,1)
@@ -230,6 +279,13 @@
         for x in range(1,self.trailbuff.getlen()-1):
             self.drawTrailLine(self.trailbuff.get(x),self.trailbuff.get(x+1))
 
+    def realtrail(self):
+        #Draws drone's movement trail
+        glLineWidth(1)
+        glColor3f(0.2, 0.2, 0.5)
+        for x in range(1,self.realtrailbuff.getlen()-1):
+            self.drawTrailLine(self.realtrailbuff.get(x),self.realtrailbuff.get(x+1))
+
     def route(self):
         #Draws drone's path
         #glLineWidth(1)
@@ -294,7 +350,6 @@
         self.eyez = abs(self.view_d * math.cos(self.view_ang))
 
 
-
 class RingBuffer:
     #Class that implements a not-yet-full buffer
     def __init__(self,size_max):
@@ -325,3 +380,4 @@
     def getlen(self):
         return len(self.data)
 
+

------------------------------------------------------------------------
r33 | mazafrav | 2016-09-15 19:50:05 +0200 (jue 15 de sep de 2016) | 2 líneas

[manuel] gui now shows 3d model of drone


Index: gui.py
===================================================================
--- gui.py	(revisión: 32)
+++ gui.py	(revisión: 33)
@@ -5,10 +5,11 @@
 from OpenGL.GL import *
 from OpenGL.GLU import *
 from PyQt4 import QtCore, QtGui, QtOpenGL
-from collada import *
+import collada
 import math
 import sys
 import pickle
+import OBJFile
 
 
 class Gui(QtGui.QWidget):
@@ -26,6 +27,12 @@
         self.changeCam.setParent(self)
         self.changeCam.clicked.connect(self.changeCamera)
 
+        self.changeView = QtGui.QPushButton("Change View")
+        self.changeView.setMinimumSize(250,40)
+        self.changeView.setMaximumSize(250,40)
+        self.changeView.setParent(self)
+        self.changeView.clicked.connect(self.changeViewpoint)
+
         self.posText = QtGui.QLabel(self)
         self.posText.setMinimumSize(250,100)
         self.posText.setMaximumSize(250,100)
@@ -48,6 +55,8 @@
         VLayout.addStretch(1)
         VLayout.addWidget(self.changeCam)
         VLayout.addStretch(1)
+        VLayout.addWidget(self.changeView)
+        VLayout.addStretch(1)
         VLayout.addWidget(self.posText)
         VLayout.addStretch(1)
 
@@ -67,6 +76,9 @@
     def changeCamera(self):
         self.interface.toggleCam()
 
+    def changeViewpoint(self):
+        self.glWidget.toggleView()
+
     def update(self):
         pose3d = self.interface.getPose3D()
         self.glWidget.setPose3D(pose3d)
@@ -98,20 +110,21 @@
         self.trailbuff = RingBuffer(150)
         #self.routbuff = RingBuffer(250)
         self.routbuff = []
-        self.view_d = 40.0
+        self.viewpoint = True
+        self.view_d = 20.0
         self.view_ang = math.radians(60.0)
         self.eyex = self.view_d * math.sin(self.view_ang)
         self.eyey = 0.0
         self.eyez = abs(self.view_d * math.cos(self.view_ang))
         self.rot = 20.0 #degrees
-        self.dronemesh = Collada('gui/quadrotor/quadrotor_2.dae')
+        self.drone3d = OBJFile.OBJFile('gui/quadrotor/blender/quadrotor_CAD2.obj')
 
     def setPose3D(self, pose3d):
         self.pose3d = pose3d
         if self.pose3d != None :
-            self.dX = 2*pose3d.x
-            self.dY = 2*pose3d.y
-            self.dZ = 2*pose3d.z
+            self.dX = pose3d.x
+            self.dY = pose3d.y
+            self.dZ = pose3d.z
             self.trailbuff.append(self.pose3d)
 
     def setRoute(self, pose3d):
@@ -119,86 +132,96 @@
             #self.routbuff.append(pose3d)
             self.routbuff = pose3d
 
-    def paintGL(self):
+    def initializeGL(self):
+        glClearColor(0.2, 0.2, 0.2, 1);
+
+        glLightfv(GL_LIGHT0, GL_POSITION,  (-40, 200, 100, 0.0))
+        glLightfv(GL_LIGHT0, GL_AMBIENT, (0.2, 0.2, 0.2, 1.0))
+        glLightfv(GL_LIGHT0, GL_DIFFUSE, (0.5, 0.5, 0.5, 1.0))
+        glEnable(GL_LIGHT0)
+        glEnable(GL_LIGHTING)
+        glEnable(GL_COLOR_MATERIAL)
+        glEnable(GL_DEPTH_TEST)
+        glShadeModel(GL_SMOOTH) 
+
         glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
-
+        glMatrixMode(GL_PROJECTION)
         glLoadIdentity()
-        gluLookAt( self.eyex,self.eyey,self.eyez, 0,0,5, 0,0,1)
+        gluPerspective( 60, 1, 1, 1000 )
+        glMatrixMode(GL_MODELVIEW)
+        gluLookAt( self.eyex,self.eyey,self.eyez, 0,0,0, 0,0,1)
         glRotatef( self.rot, 0, 0, 1 )
 
+
+    def paintGL(self):
+
+
+        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
+        #glMatrixMode(GL_PROJECTION) # Select The Projection Matrix
+        glMatrixMode(GL_MODELVIEW)
+        glLoadIdentity()
+        if self.viewpoint == True :
+            gluLookAt( self.eyex,self.eyey,self.eyez, 0,0,0, 0,0,1)
+            glRotatef( self.rot, 0, 0, 1 )
+        else :
+            gluLookAt( self.dX + self.view_d*math.cos(15) ,
+                        self.dY + self.view_d*math.cos(15) ,
+                        self.dZ + self.view_d*math.sin(15) ,
+                        self.dX, self.dY, self.dZ,
+                        0,0,1)
         self.axis()
         self.floor()
-        if self.pose3d != None :
-            self.drone()
         self.trail()
         if self.routbuff != None :
             self.route()
+        if self.pose3d != None :
+            self.drone()
         self.swapBuffers()
 
-    def initializeGL(self):
-        glClearColor(0.0, 0.0, 0.0, 0.0);
-        glEnable(GL_DEPTH_TEST)
-        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
-        glMatrixMode(GL_PROJECTION)
-        glLoadIdentity()
-        gluPerspective( 60, 1, 1, 1000 )
-        glMatrixMode(GL_MODELVIEW)
-        gluLookAt( self.eyex,self.eyey,self.eyez, 0,0,5, 0,0,1)
-        glRotatef( self.rot, 0, 0, 1 )
 
     def axis(self):
         #Draws 3d axis
-        glLineWidth(1)
+        glLineWidth(2)
         glColor3f(1.0, 0.0, 0.0)
         glBegin(GL_LINES)
         glVertex3f(0, 0, 0)
-        glVertex3f(10, 0, 0)
+        glVertex3f(5, 0, 0)
         glEnd()
         glColor3f(0.0, 1.0, 0.0)
         glBegin(GL_LINES)
         glVertex3f(0, 0, 0)
-        glVertex3f(0, 10, 0)
+        glVertex3f(0, 5, 0)
         glEnd()
         glColor3f(0.0, 0.0, 1.0)
         glBegin(GL_LINES)
         glVertex3f(0, 0, 0)
-        glVertex3f(0, 0, 10)
+        glVertex3f(0, 0, 5)
         glEnd()
 
     def floor(self):
         #Draws floor grid
         glLineWidth(0.5)
-        glColor3f(0.2, 0.2, 0.2)
+        glColor3f(0.0, 0.0, 0.0)
         for x in range(-10,11):
             glBegin(GL_LINES)
-            glVertex3f(x*3, -30, 0)
-            glVertex3f(x*3, 30, 0)
+            glVertex3f(x*2, -20, 0)
+            glVertex3f(x*2, 20, 0)
             glEnd()
             glBegin(GL_LINES)
-            glVertex3f(30, x*3, 0)
-            glVertex3f(-30, x*3, 0)
+            glVertex3f(20, x*2, 0)
+            glVertex3f(-20, x*2, 0)
             glEnd()
 
     def drone(self):
         #Draws drone position
+        glDisable(GL_COLOR_MATERIAL)
         yaw = self.qtoyaw(self.pose3d.q0,self.pose3d.q1,self.pose3d.q2,self.pose3d.q3)
         glPushMatrix();
         glTranslate(self.dX,self.dY,self.dZ)
         glRotatef(yaw,0,0,1)
-        glColor3f(0.9, 0.9, 0.9)
-        c = gluNewQuadric()
-        gluCylinder(c,1.3,1.3,0.5,8,2)
-        glPointSize(6)
-        glBegin(GL_POINTS)
-        glVertex(0,0,0.3)
-        glEnd()
-        glColor3f(0.9, 0.2, 0.2)
-        glLineWidth(2.5)
-        glBegin(GL_LINES)
-        glVertex3f(0, 0, 0.3)
-        glVertex3f(2, 0, 0.3)
-        glEnd()
-        glPopMatrix();
+        self.drone3d.draw()
+        glPopMatrix()
+        glEnable(GL_COLOR_MATERIAL)
 
     def trail(self):
         #Draws drone's movement trail
@@ -219,11 +242,11 @@
 
         for (x,y,z) in self.routbuff:
             glBegin(GL_POINTS)
-            glVertex(x*2,y*2,z*2)
+            glVertex(x,y,z)
             glEnd()
             glBegin(GL_LINES)
-            glVertex3f(x*2,y*2,z*2)
-            glVertex3f(xx*2,yy*2,zz*2)
+            glVertex3f(x,y,z)
+            glVertex3f(xx,yy,zz)
             glEnd()
             (xx, yy, zz) = (x, y, z)
 
@@ -230,21 +253,26 @@
     def drawTrailLine(self, poseA, poseB):
         #Draws line between two given pose3D data structures
         glBegin(GL_LINES)
-        glVertex3f(poseA.x*2, poseA.y*2, poseA.z*2)
-        glVertex3f(poseB.x*2, poseB.y*2, poseB.z*2)
+        glVertex3f(poseA.x, poseA.y, poseA.z)
+        glVertex3f(poseB.x, poseB.y, poseB.z)
         glEnd()
 
     def qtoyaw(self, q0,q1,q2,q3):
-        #Transforms quaternions to (yaw,pitch,roll)
+        #Transforms quaternions to (yaw,pitch,roll) 
         yaw = math.atan2(2.0*(q0*q3 + q1*2), 1 - 2*(q2*q2 + q3*q3));
         return math.degrees(yaw)  #[degrees]
 
+    def toggleView(self):
+        self.viewpoint = not self.viewpoint
+        if not self.viewpoint : self.view_d = 5
+
     def keyPressEvent(self, e):
         if e.key() == QtCore.Qt.Key_Right :
             self.rot -= 2
         elif e.key() == QtCore.Qt.Key_Left :
             self.rot += 2
-        elif e.key() == QtCore.Qt.Key_Up :
+	    #elif
+        if e.key() == QtCore.Qt.Key_Up :
             self.view_ang -= math.radians(0.7)
             if self.view_ang > math.radians(90):
                 self.view_ang = math.radians(90)

------------------------------------------------------------------------
r31 | mazafrav | 2016-07-13 11:11:14 +0200 (mié 13 de jul de 2016) | 1 línea



Index: gui.py
===================================================================
--- gui.py	(revisión: 30)
+++ gui.py	(revisión: 31)
@@ -5,6 +5,7 @@
 from OpenGL.GL import *
 from OpenGL.GLU import *
 from PyQt4 import QtCore, QtGui, QtOpenGL
+from collada import *
 import math
 import sys
 import pickle
@@ -103,6 +104,7 @@
         self.eyey = 0.0
         self.eyez = abs(self.view_d * math.cos(self.view_ang))
         self.rot = 20.0 #degrees
+        self.dronemesh = Collada('gui/quadrotor/quadrotor_2.dae')
 
     def setPose3D(self, pose3d):
         self.pose3d = pose3d

------------------------------------------------------------------------
r29 | mazafrav | 2016-03-14 23:08:22 +0100 (lun 14 de mar de 2016) | 1 línea



Index: gui.py
===================================================================
--- gui.py	(revisión: 28)
+++ gui.py	(revisión: 29)
@@ -16,18 +16,24 @@
         super(Gui, self).__init__()
 
         self.setWindowTitle('Drone Navigator')
-        self.setMinimumSize(730,420)
-        self.setMaximumSize(730,420)
+        self.setMinimumSize(780,470)
+        self.setMaximumSize(780,470)
 
-        changeCam = QtGui.QPushButton("Change Camera")
-        changeCam.setMinimumSize(250,40)
-        changeCam.setMaximumSize(250,40)
-        changeCam.setParent(self)
-        changeCam.clicked.connect(self.changeCamera)
+        self.changeCam = QtGui.QPushButton("Change Camera")
+        self.changeCam.setMinimumSize(250,40)
+        self.changeCam.setMaximumSize(250,40)
+        self.changeCam.setParent(self)
+        self.changeCam.clicked.connect(self.changeCamera)
 
+        self.posText = QtGui.QLabel(self)
+        self.posText.setMinimumSize(250,100)
+        self.posText.setMaximumSize(250,100)
+        self.posText.show()
+
         self.glWidget = GLWidget()
-        self.glWidget.setMinimumSize(400,400)
-        self.glWidget.setMaximumSize(400,400)
+        self.glWidget.setMinimumSize(450,450)
+        self.glWidget.setMaximumSize(450,450)
+        self.glWidget.setFocusPolicy(QtCore.Qt.StrongFocus)
 
         self.imgLabel=QtGui.QLabel(self)
         self.imgLabel.setMinimumSize(250,250)
@@ -39,8 +45,10 @@
         VLayout.addStretch(1)
         VLayout.addWidget(self.imgLabel)
         VLayout.addStretch(1)
-        VLayout.addWidget(changeCam)
+        VLayout.addWidget(self.changeCam)
         VLayout.addStretch(1)
+        VLayout.addWidget(self.posText)
+        VLayout.addStretch(1)
 
         HLayout = QtGui.QHBoxLayout()
         HLayout.addStretch(1)
@@ -67,6 +75,8 @@
         image = self.interface.getImage()
         if image != None:
             self.emit(QtCore.SIGNAL("NewImg"), image)
+        self.posText.setText("Position: \n(%f, %f, %f)"
+            %(pose3d.x, pose3d.y, pose3d.z))
 
     def update_img(self, image):
         img = QtGui.QImage(image.data, image.shape[1], image.shape[0], QtGui.QImage.Format_RGB888)
@@ -87,6 +97,12 @@
         self.trailbuff = RingBuffer(150)
         #self.routbuff = RingBuffer(250)
         self.routbuff = []
+        self.view_d = 40.0
+        self.view_ang = math.radians(60.0)
+        self.eyex = self.view_d * math.sin(self.view_ang)
+        self.eyey = 0.0
+        self.eyez = abs(self.view_d * math.cos(self.view_ang))
+        self.rot = 20.0 #degrees
 
     def setPose3D(self, pose3d):
         self.pose3d = pose3d
@@ -103,6 +119,11 @@
 
     def paintGL(self):
         glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
+
+        glLoadIdentity()
+        gluLookAt( self.eyex,self.eyey,self.eyez, 0,0,5, 0,0,1)
+        glRotatef( self.rot, 0, 0, 1 )
+
         self.axis()
         self.floor()
         if self.pose3d != None :
@@ -116,18 +137,16 @@
         glClearColor(0.0, 0.0, 0.0, 0.0);
         glEnable(GL_DEPTH_TEST)
         glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
-
-    def resizeGL(self, w, h):
         glMatrixMode(GL_PROJECTION)
         glLoadIdentity()
         gluPerspective( 60, 1, 1, 1000 )
-        glMatrixMode( GL_MODELVIEW )
-        gluLookAt( 30,30,40, 0,0,5, 0,0,1)
-        glRotatef( 20, 0, 0, 1 )
+        glMatrixMode(GL_MODELVIEW)
+        gluLookAt( self.eyex,self.eyey,self.eyez, 0,0,5, 0,0,1)
+        glRotatef( self.rot, 0, 0, 1 )
 
     def axis(self):
         #Draws 3d axis
-        glLineWidth(2)
+        glLineWidth(1)
         glColor3f(1.0, 0.0, 0.0)
         glBegin(GL_LINES)
         glVertex3f(0, 0, 0)
@@ -146,7 +165,7 @@
 
     def floor(self):
         #Draws floor grid
-        glLineWidth(1)
+        glLineWidth(0.5)
         glColor3f(0.2, 0.2, 0.2)
         for x in range(-10,11):
             glBegin(GL_LINES)
@@ -166,10 +185,10 @@
         glRotatef(yaw,0,0,1)
         glColor3f(0.9, 0.9, 0.9)
         c = gluNewQuadric()
-        gluCylinder(c,1.3,1.3,0.7,6,4)
-        glPointSize(4)
+        gluCylinder(c,1.3,1.3,0.5,8,2)
+        glPointSize(6)
         glBegin(GL_POINTS)
-        glVertex(0,0,0)
+        glVertex(0,0,0.3)
         glEnd()
         glColor3f(0.9, 0.2, 0.2)
         glLineWidth(2.5)
@@ -193,7 +212,7 @@
         #for x in range(1,self.routbuff.getlen()-1):
         #    self.drawTrailLine(self.routbuff.get(x),self.routbuff.get(x+1))
         glColor3f(0.7, 0.3, 0.3)
-        glPointSize(4)
+        glPointSize(2)
         (xx, yy, zz) = self.routbuff[0]
 
         for (x,y,z) in self.routbuff:
@@ -218,8 +237,34 @@
         yaw = math.atan2(2.0*(q0*q3 + q1*2), 1 - 2*(q2*q2 + q3*q3));
         return math.degrees(yaw)  #[degrees]
 
+    def keyPressEvent(self, e):
+        if e.key() == QtCore.Qt.Key_Right :
+            self.rot -= 2
+        elif e.key() == QtCore.Qt.Key_Left :
+            self.rot += 2
+        elif e.key() == QtCore.Qt.Key_Up :
+            self.view_ang -= math.radians(0.7)
+            if self.view_ang > math.radians(90):
+                self.view_ang = math.radians(90)
+            self.eyex = self.view_d * math.sin(self.view_ang)
+            self.eyez = abs(self.view_d * math.cos(self.view_ang))
+        elif e.key() == QtCore.Qt.Key_Down :
+            self.view_ang += math.radians(0.7)
+            if self.view_ang < 0.0:
+                self.view_ang = 0.0
+            self.eyex = self.view_d * math.sin(self.view_ang)
+            self.eyez = abs(self.view_d * math.cos(self.view_ang))
 
+    def wheelEvent(self, e):
+        if e.delta() > 0 :
+            self.view_d -= 1
+        elif e.delta() < 0 :
+            self.view_d += 1
+        self.eyex = self.view_d * math.sin(self.view_ang)
+        self.eyez = abs(self.view_d * math.cos(self.view_ang))
 
+
+
 class RingBuffer:
     #Class that implements a not-yet-full buffer
     def __init__(self,size_max):

------------------------------------------------------------------------
r27 | mazafrav | 2016-03-03 21:46:07 +0100 (jue 03 de mar de 2016) | 1 línea



Index: gui.py
===================================================================
--- gui.py	(revisión: 26)
+++ gui.py	(revisión: 27)
@@ -160,8 +160,10 @@
 
     def drone(self):
         #Draws drone position
+        yaw = self.qtoyaw(self.pose3d.q0,self.pose3d.q1,self.pose3d.q2,self.pose3d.q3)
         glPushMatrix();
         glTranslate(self.dX,self.dY,self.dZ)
+        glRotatef(yaw,0,0,1)
         glColor3f(0.9, 0.9, 0.9)
         c = gluNewQuadric()
         gluCylinder(c,1.3,1.3,0.7,6,4)
@@ -169,6 +171,12 @@
         glBegin(GL_POINTS)
         glVertex(0,0,0)
         glEnd()
+        glColor3f(0.9, 0.2, 0.2)
+        glLineWidth(2.5)
+        glBegin(GL_LINES)
+        glVertex3f(0, 0, 0.3)
+        glVertex3f(2, 0, 0.3)
+        glEnd()
         glPopMatrix();
 
     def trail(self):
@@ -205,8 +213,13 @@
         glVertex3f(poseB.x*2, poseB.y*2, poseB.z*2)
         glEnd()
 
+    def qtoyaw(self, q0,q1,q2,q3):
+        #Transforms quaternions to (yaw,pitch,roll)
+        yaw = math.atan2(2.0*(q0*q3 + q1*2), 1 - 2*(q2*q2 + q3*q3));
+        return math.degrees(yaw)  #[degrees]
 
 
+
 class RingBuffer:
     #Class that implements a not-yet-full buffer
     def __init__(self,size_max):

------------------------------------------------------------------------
r23 | mazafrav | 2016-03-01 11:58:56 +0100 (mar 01 de mar de 2016) | 2 líneas

[manuel] added navigator


Index: gui.py
===================================================================
--- gui.py	(nonexistent)
+++ gui.py	(revisión: 23)
@@ -0,0 +1,239 @@
+# -*- coding: utf-8 -*-
+
+from PyQt4 import QtGui
+from PyQt4.QtOpenGL import *
+from OpenGL.GL import *
+from OpenGL.GLU import *
+from PyQt4 import QtCore, QtGui, QtOpenGL
+import math
+import sys
+import pickle
+
+
+class Gui(QtGui.QWidget):
+
+    def __init__(self):
+        super(Gui, self).__init__()
+
+        self.setWindowTitle('Drone Navigator')
+        self.setMinimumSize(730,420)
+        self.setMaximumSize(730,420)
+
+        changeCam = QtGui.QPushButton("Change Camera")
+        changeCam.setMinimumSize(250,40)
+        changeCam.setMaximumSize(250,40)
+        changeCam.setParent(self)
+        changeCam.clicked.connect(self.changeCamera)
+
+        self.glWidget = GLWidget()
+        self.glWidget.setMinimumSize(400,400)
+        self.glWidget.setMaximumSize(400,400)
+
+        self.imgLabel=QtGui.QLabel(self)
+        self.imgLabel.setMinimumSize(250,250)
+        self.imgLabel.setMaximumSize(250,250)
+        self.imgLabel.show()
+        self.connect(self, QtCore.SIGNAL("NewImg"), self.update_img)
+        
+        VLayout = QtGui.QVBoxLayout()
+        VLayout.addStretch(1)
+        VLayout.addWidget(self.imgLabel)
+        VLayout.addStretch(1)
+        VLayout.addWidget(changeCam)
+        VLayout.addStretch(1)
+
+        HLayout = QtGui.QHBoxLayout()
+        HLayout.addStretch(1)
+        HLayout.addLayout(VLayout)
+        HLayout.addStretch(1)
+        HLayout.addWidget(self.glWidget)
+        HLayout.addStretch(1)
+
+        self.setLayout(HLayout)
+        
+
+    def setInterface(self,interface):
+        self.interface=interface
+
+    def changeCamera(self):
+        self.interface.toggleCam()
+
+    def update(self):
+        pose3d = self.interface.getPose3D()
+        self.glWidget.setPose3D(pose3d)
+        route = self.interface.getRoute()
+        self.glWidget.setRoute(route)
+        self.glWidget.update()
+        image = self.interface.getImage()
+        if image != None:
+            self.emit(QtCore.SIGNAL("NewImg"), image)
+
+    def update_img(self, image):
+        img = QtGui.QImage(image.data, image.shape[1], image.shape[0], QtGui.QImage.Format_RGB888)
+        #size=QtCore.QSize(image.shape[1],image.shape[0])
+        #self.imgLabel.resize(size)
+        self.imgLabel.setPixmap(QtGui.QPixmap.fromImage(img))
+
+
+
+
+# OPENGL WIDGET CLASS
+
+class GLWidget(QtOpenGL.QGLWidget):
+
+    def __init__(self, parent=None):
+        super(GLWidget, self).__init__(parent)
+        self.pose3d = None
+        self.trailbuff = RingBuffer(150)
+        #self.routbuff = RingBuffer(250)
+        self.routbuff = []
+
+    def setPose3D(self, pose3d):
+        self.pose3d = pose3d
+        if self.pose3d != None :
+            self.dX = 2*pose3d.x
+            self.dY = 2*pose3d.y
+            self.dZ = 2*pose3d.z
+            self.trailbuff.append(self.pose3d)
+
+    def setRoute(self, pose3d):
+        if pose3d != None :
+            #self.routbuff.append(pose3d)
+            self.routbuff = pose3d
+
+    def paintGL(self):
+        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
+        self.axis()
+        self.floor()
+        if self.pose3d != None :
+            self.drone()
+        self.trail()
+        if self.routbuff != None :
+            self.route()
+        self.swapBuffers()
+
+    def initializeGL(self):
+        glClearColor(0.0, 0.0, 0.0, 0.0);
+        glEnable(GL_DEPTH_TEST)
+        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
+
+    def resizeGL(self, w, h):
+        glMatrixMode(GL_PROJECTION)
+        glLoadIdentity()
+        gluPerspective( 60, 1, 1, 1000 )
+        glMatrixMode( GL_MODELVIEW )
+        gluLookAt( 30,30,40, 0,0,5, 0,0,1)
+        glRotatef( 20, 0, 0, 1 )
+
+    def axis(self):
+        #Draws 3d axis
+        glLineWidth(2)
+        glColor3f(1.0, 0.0, 0.0)
+        glBegin(GL_LINES)
+        glVertex3f(0, 0, 0)
+        glVertex3f(10, 0, 0)
+        glEnd()
+        glColor3f(0.0, 1.0, 0.0)
+        glBegin(GL_LINES)
+        glVertex3f(0, 0, 0)
+        glVertex3f(0, 10, 0)
+        glEnd()
+        glColor3f(0.0, 0.0, 1.0)
+        glBegin(GL_LINES)
+        glVertex3f(0, 0, 0)
+        glVertex3f(0, 0, 10)
+        glEnd()
+
+    def floor(self):
+        #Draws floor grid
+        glLineWidth(1)
+        glColor3f(0.2, 0.2, 0.2)
+        for x in range(-10,11):
+            glBegin(GL_LINES)
+            glVertex3f(x*3, -30, 0)
+            glVertex3f(x*3, 30, 0)
+            glEnd()
+            glBegin(GL_LINES)
+            glVertex3f(30, x*3, 0)
+            glVertex3f(-30, x*3, 0)
+            glEnd()
+
+    def drone(self):
+        #Draws drone position
+        glPushMatrix();
+        glTranslate(self.dX,self.dY,self.dZ)
+        glColor3f(0.9, 0.9, 0.9)
+        c = gluNewQuadric()
+        gluCylinder(c,1.3,1.3,0.7,6,4)
+        glPointSize(4)
+        glBegin(GL_POINTS)
+        glVertex(0,0,0)
+        glEnd()
+        glPopMatrix();
+
+    def trail(self):
+        #Draws drone's movement trail
+        glLineWidth(1)
+        glColor3f(0.2, 0.5, 0.2)
+        for x in range(1,self.trailbuff.getlen()-1):
+            self.drawTrailLine(self.trailbuff.get(x),self.trailbuff.get(x+1))
+
+    def route(self):
+        #Draws drone's path
+        #glLineWidth(1)
+        #glColor3f(0.7, 0.3, 0.3)
+        #for x in range(1,self.routbuff.getlen()-1):
+        #    self.drawTrailLine(self.routbuff.get(x),self.routbuff.get(x+1))
+        glColor3f(0.7, 0.3, 0.3)
+        glPointSize(4)
+        (xx, yy, zz) = self.routbuff[0]
+
+        for (x,y,z) in self.routbuff:
+            glBegin(GL_POINTS)
+            glVertex(x*2,y*2,z*2)
+            glEnd()
+            glBegin(GL_LINES)
+            glVertex3f(x*2,y*2,z*2)
+            glVertex3f(xx*2,yy*2,zz*2)
+            glEnd()
+            (xx, yy, zz) = (x, y, z)
+
+    def drawTrailLine(self, poseA, poseB):
+        #Draws line between two given pose3D data structures
+        glBegin(GL_LINES)
+        glVertex3f(poseA.x*2, poseA.y*2, poseA.z*2)
+        glVertex3f(poseB.x*2, poseB.y*2, poseB.z*2)
+        glEnd()
+
+
+
+class RingBuffer:
+    #Class that implements a not-yet-full buffer
+    def __init__(self,size_max):
+        self.max = size_max
+        self.data = []
+
+    class __Full:
+        #Class that implements a full buffer
+        def append(self, x):
+            self.data[self.cur] = x
+            self.cur = (self.cur+1) % self.max
+        def get(self,x):
+            return self.data[(self.cur+x) % self.max]
+        def getlen(self):
+            return self.max
+
+    def append(self,x):
+        self.data.append(x)
+        if len(self.data) == self.max:
+            self.cur = 0
+            # Permanently change self's class from non-full to full
+            self.__class__ = self.__Full
+
+    def get(self,x):
+        #Return data in the given position
+        return self.data[x]
+
+    def getlen(self):
+        return len(self.data)
+

------------------------------------------------------------------------
